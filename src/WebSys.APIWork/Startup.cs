using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace WebSys.APIWork
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();

            //#region Jwt认证
            ////将appsettings.json中的JwtSettings部分文件读取到JwtSettings中，这是给其他地方用的
            //services.Configure<JwtSettings>(Configuration.GetSection("JwtSettings"));

            // var jwtSettings = new JwtSettings(); //由于初始化的时候我们就需要用，所以使用Bind的方式读取配置
            //Configuration.Bind("JwtSettings", jwtSettings); //将配置绑定到JwtSettings实例中

            //services.AddAuthentication(options => {
            //    //认证middleware配置
            //    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            //    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            //})
            //.AddJwtBearer(o => {
            //    //主要是jwt  token参数设置
            //    o.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
            //    {
            //        //Token颁发机构
            //        ValidIssuer = jwtSettings.Issuer,
            //        //颁发给谁
            //        ValidAudience = jwtSettings.Audience,
            //        //这里的key要进行加密，需要引用Microsoft.IdentityModel.Tokens
            //        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings.SecretKey)),
            //        //ValidateIssuerSigningKey=true,
            //        ////是否验证Token有效期，使用当前时间与Token的Claims中的NotBefore和Expires对比
            //        ValidateLifetime = true,
            //        ////允许的服务器时间偏移量
            //        ClockSkew = TimeSpan.FromMinutes(5)

            //    };
            //});

            //#endregion
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            //app.UseAuthentication();

            //app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}